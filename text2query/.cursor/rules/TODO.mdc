---
description: When you need to assess the current progress When you need to identify what needs to be done When there is a change in the plan
alwaysApply: false
---
# text2query MCP Server - 구현 TODO

## 🏗️ 프로젝트 설정 및 환경 구성

### Phase 1: 기본 환경 설정
- [ ] **프로젝트 구조 생성**
  - [ ] `tutorial/.cursor/rules/` 디렉터리 생성 ✅
  - [ ] `tutorial/mongo-init/` 디렉터리 생성
  - [ ] `tutorial/graphql-server/` 디렉터리 생성
  - [ ] `tutorial/mcp-server/` 디렉터리 생성

- [ ] **Docker 환경 설정**
  - [ ] `docker-compose.yml` 작성
    - [ ] MongoDB 서비스 설정 (포트: 27017)
    - [ ] GraphQL Server 서비스 설정 (포트: 4000)
    - [ ] Mongo Express 서비스 설정 (포트: 8081)
    - [ ] 네트워크 및 볼륨 설정
  - [ ] `.env` 파일 생성 (MongoDB 연결 정보)

### Phase 2: MongoDB 데이터 준비
- [ ] **샘플 데이터 스크립트**
  - [ ] `mongo-init/seed-data.js` 작성
    - [ ] User 컬렉션 샘플 데이터 (15-20개)
    - [ ] Post 컬렉션 샘플 데이터 (15-20개)
    - [ ] Comment 컬렉션 샘플 데이터 (15-20개)
    - [ ] 관계 데이터 일관성 보장

## 🚀 GraphQL Server 구현

### Phase 3: Apollo Server 설정
- [ ] **프로젝트 초기화**
  - [ ] `graphql-server/package.json` 생성
  - [ ] 필요한 패키지 설치
    - [ ] `apollo-server-express`
    - [ ] `mongoose`
    - [ ] `typescript`
    - [ ] `@types/node`
    - [ ] `ts-node`
  - [ ] `graphql-server/Dockerfile` 작성

- [ ] **Mongoose 모델 정의**
  - [ ] `graphql-server/src/models.ts` 구현
    - [ ] User 모델 정의
    - [ ] Post 모델 정의 (authorId 참조)
    - [ ] Comment 모델 정의 (postId, authorId 참조)

### Phase 4: GraphQL 스키마 및 리졸버
- [ ] **스키마 정의**
  - [ ] `graphql-server/src/schema.ts` 구현
    - [ ] User, Post, Comment 타입 정의
    - [ ] Query 타입 정의 (users, user, posts, post, comments)
    - [ ] 관계 필드 정의

- [ ] **리졸버 구현**
  - [ ] `graphql-server/src/resolvers.ts` 구현
    - [ ] User 리졸버 (posts 관계 포함)
    - [ ] Post 리졸버 (author, comments 관계 포함)
    - [ ] Comment 리졸버 (author, post 관계 포함)
    - [ ] Root Query 리졸버

- [ ] **서버 설정**
  - [ ] `graphql-server/src/index.ts` 구현
    - [ ] MongoDB 연결 설정
    - [ ] Apollo Server 설정
    - [ ] Express 미들웨어 설정
    - [ ] GraphQL Playground 활성화

## 🔧 MCP Server 구현

### Phase 5: MCP 서버 기본 구조
- [ ] **프로젝트 초기화**
  - [ ] `mcp-server/package.json` 생성
  - [ ] 필요한 패키지 설치
    - [ ] `@modelcontextprotocol/sdk`
    - [ ] `typescript`
    - [ ] `@types/node`
    - [ ] `axios` (GraphQL 쿼리 실행용)

- [ ] **기본 MCP 서버**
  - [ ] `mcp-server/src/index.ts` 구현
    - [ ] MCP 서버 초기화
    - [ ] 도구 등록
    - [ ] 에러 핸들링

### Phase 6: 자연어 변환기 구현
- [ ] **변환 로직**
  - [ ] `mcp-server/src/converter.ts` 구현
    - [ ] 한국어 패턴 인식 함수
    - [ ] 엔티티 매핑 (사용자→users, 게시글→posts 등)
    - [ ] 필드 매핑 (이름→name, 이메일→email 등)
    - [ ] 관계 쿼리 변환 로직
    - [ ] 조건절 처리 로직

### Phase 7: MCP 도구 구현
- [ ] **도구 구현**
  - [ ] `mcp-server/src/tools.ts` 구현
    - [ ] `text_to_graphql` 도구
      - [ ] 자연어 입력 받기
      - [ ] converter를 사용한 GraphQL 변환
      - [ ] 변환 결과 반환
    - [ ] `execute_graphql` 도구
      - [ ] GraphQL 쿼리 입력 받기
      - [ ] Apollo Server로 쿼리 실행
      - [ ] 결과 JSON 반환
    - [ ] `get_schema_info` 도구
      - [ ] GraphQL 스키마 정보 조회
      - [ ] 타입 및 필드 목록 반환

## 🧪 테스트 및 검증

### Phase 8: 통합 테스트
- [ ] **환경 테스트**
  - [ ] `docker-compose up` 실행 확인
  - [ ] MongoDB 연결 및 데이터 로딩 확인
  - [ ] GraphQL Playground 접속 확인 (`http://localhost:4000`)
  - [ ] Mongo Express 접속 확인 (`http://localhost:8081`)

- [ ] **GraphQL API 테스트**
  - [ ] 기본 쿼리 실행
    - [ ] `{ users { name email } }`
    - [ ] `{ posts { title author { name } } }`
    - [ ] `{ comments { content author { name } post { title } } }`
  - [ ] 관계 쿼리 실행
    - [ ] 사용자별 게시글 조회
    - [ ] 게시글별 댓글 조회

- [ ] **MCP 도구 테스트**
  - [ ] `text_to_graphql` 변환 테스트
    - [ ] "모든 사용자의 이름과 이메일"
    - [ ] "개발팀 사용자들"
    - [ ] "최근 게시글 5개"
  - [ ] `execute_graphql` 실행 테스트
  - [ ] `get_schema_info` 정보 조회 테스트

## 📚 문서화 및 마무리

### Phase 9: 문서 작성
- [ ] **README.md 작성**
  - [ ] 프로젝트 소개
  - [ ] 설치 및 실행 방법
  - [ ] MCP 도구 사용법
  - [ ] 예제 쿼리 모음

- [ ] **추가 문서**
  - [ ] GraphQL 스키마 문서
  - [ ] 자연어 변환 패턴 가이드
  - [ ] 트러블슈팅 가이드

### Phase 10: 최적화 및 개선
- [ ] **성능 최적화**
  - [ ] MongoDB 인덱스 설정
  - [ ] GraphQL 쿼리 최적화
  - [ ] 변환 로직 성능 개선

- [ ] **에러 처리 강화**
  - [ ] 잘못된 자연어 입력 처리
  - [ ] GraphQL 쿼리 오류 처리
  - [ ] 네트워크 오류 처리

## 🎯 검증 체크리스트

### 최종 확인 사항
- [ ] **환경 구성**
  - [ ] `docker-compose up`으로 모든 서비스 정상 실행
  - [ ] 모든 포트 정상 접근 (4000, 8081, 27017)

- [ ] **데이터 및 API**
  - [ ] MongoDB에 샘플 데이터 정상 로딩
  - [ ] GraphQL Playground에서 모든 쿼리 실행 가능
  - [ ] 관계 조회 정상 작동

- [ ] **MCP 기능**
  - [ ] 3개 도구 모두 정상 작동
  - [ ] 기본적인 한국어 패턴 변환 성공
  - [ ] 복잡한 관계 쿼리 변환 가능

- [ ] **사용자 경험**
  - [ ] 직관적인 자연어 입력 지원
  - [ ] 명확한 오류 메시지 제공
  - [ ] 충분한 문서화 완료

## 🔄 개발 우선순위
1. **1단계**: Docker 환경 구성 및 GraphQL 서버 구축
2. **2단계**: 기본 MCP 도구 구현
3. **3단계**: 자연어 변환 로직 구현
4. **4단계**: 테스트 및 문서화
5. **5단계**: 최적화 및 개선
---
# text2query MCP Server - 구현 TODO

## 🏗️ 프로젝트 설정 및 환경 구성

### Phase 1: 기본 환경 설정
- [ ] **프로젝트 구조 생성**
  - [ ] `tutorial/.cursor/rules/` 디렉터리 생성 ✅
  - [ ] `tutorial/mongo-init/` 디렉터리 생성
  - [ ] `tutorial/graphql-server/` 디렉터리 생성
  - [ ] `tutorial/mcp-server/` 디렉터리 생성

- [ ] **Docker 환경 설정**
  - [ ] `docker-compose.yml` 작성
    - [ ] MongoDB 서비스 설정 (포트: 27017)
    - [ ] GraphQL Server 서비스 설정 (포트: 4000)
    - [ ] Mongo Express 서비스 설정 (포트: 8081)
    - [ ] 네트워크 및 볼륨 설정
  - [ ] `.env` 파일 생성 (MongoDB 연결 정보)

### Phase 2: MongoDB 데이터 준비
- [ ] **샘플 데이터 스크립트**
  - [ ] `mongo-init/seed-data.js` 작성
    - [ ] User 컬렉션 샘플 데이터 (15-20개)
    - [ ] Post 컬렉션 샘플 데이터 (15-20개)
    - [ ] Comment 컬렉션 샘플 데이터 (15-20개)
    - [ ] 관계 데이터 일관성 보장

## 🚀 GraphQL Server 구현

### Phase 3: Apollo Server 설정
- [ ] **프로젝트 초기화**
  - [ ] `graphql-server/package.json` 생성
  - [ ] 필요한 패키지 설치
    - [ ] `apollo-server-express`
    - [ ] `mongoose`
    - [ ] `typescript`
    - [ ] `@types/node`
    - [ ] `ts-node`
  - [ ] `graphql-server/Dockerfile` 작성

- [ ] **Mongoose 모델 정의**
  - [ ] `graphql-server/src/models.ts` 구현
    - [ ] User 모델 정의
    - [ ] Post 모델 정의 (authorId 참조)
    - [ ] Comment 모델 정의 (postId, authorId 참조)

### Phase 4: GraphQL 스키마 및 리졸버
- [ ] **스키마 정의**
  - [ ] `graphql-server/src/schema.ts` 구현
    - [ ] User, Post, Comment 타입 정의
    - [ ] Query 타입 정의 (users, user, posts, post, comments)
    - [ ] 관계 필드 정의

- [ ] **리졸버 구현**
  - [ ] `graphql-server/src/resolvers.ts` 구현
    - [ ] User 리졸버 (posts 관계 포함)
    - [ ] Post 리졸버 (author, comments 관계 포함)
    - [ ] Comment 리졸버 (author, post 관계 포함)
    - [ ] Root Query 리졸버

- [ ] **서버 설정**
  - [ ] `graphql-server/src/index.ts` 구현
    - [ ] MongoDB 연결 설정
    - [ ] Apollo Server 설정
    - [ ] Express 미들웨어 설정
    - [ ] GraphQL Playground 활성화

## 🔧 MCP Server 구현

### Phase 5: MCP 서버 기본 구조
- [ ] **프로젝트 초기화**
  - [ ] `mcp-server/package.json` 생성
  - [ ] 필요한 패키지 설치
    - [ ] `@modelcontextprotocol/sdk`
    - [ ] `typescript`
    - [ ] `@types/node`
    - [ ] `axios` (GraphQL 쿼리 실행용)

- [ ] **기본 MCP 서버**
  - [ ] `mcp-server/src/index.ts` 구현
    - [ ] MCP 서버 초기화
    - [ ] 도구 등록
    - [ ] 에러 핸들링

### Phase 6: 자연어 변환기 구현
- [ ] **변환 로직**
  - [ ] `mcp-server/src/converter.ts` 구현
    - [ ] 한국어 패턴 인식 함수
    - [ ] 엔티티 매핑 (사용자→users, 게시글→posts 등)
    - [ ] 필드 매핑 (이름→name, 이메일→email 등)
    - [ ] 관계 쿼리 변환 로직
    - [ ] 조건절 처리 로직

### Phase 7: MCP 도구 구현
- [ ] **도구 구현**
  - [ ] `mcp-server/src/tools.ts` 구현
    - [ ] `text_to_graphql` 도구
      - [ ] 자연어 입력 받기
      - [ ] converter를 사용한 GraphQL 변환
      - [ ] 변환 결과 반환
    - [ ] `execute_graphql` 도구
      - [ ] GraphQL 쿼리 입력 받기
      - [ ] Apollo Server로 쿼리 실행
      - [ ] 결과 JSON 반환
    - [ ] `get_schema_info` 도구
      - [ ] GraphQL 스키마 정보 조회
      - [ ] 타입 및 필드 목록 반환

## 🧪 테스트 및 검증

### Phase 8: 통합 테스트
- [ ] **환경 테스트**
  - [ ] `docker-compose up` 실행 확인
  - [ ] MongoDB 연결 및 데이터 로딩 확인
  - [ ] GraphQL Playground 접속 확인 (`http://localhost:4000`)
  - [ ] Mongo Express 접속 확인 (`http://localhost:8081`)

- [ ] **GraphQL API 테스트**
  - [ ] 기본 쿼리 실행
    - [ ] `{ users { name email } }`
    - [ ] `{ posts { title author { name } } }`
    - [ ] `{ comments { content author { name } post { title } } }`
  - [ ] 관계 쿼리 실행
    - [ ] 사용자별 게시글 조회
    - [ ] 게시글별 댓글 조회

- [ ] **MCP 도구 테스트**
  - [ ] `text_to_graphql` 변환 테스트
    - [ ] "모든 사용자의 이름과 이메일"
    - [ ] "개발팀 사용자들"
    - [ ] "최근 게시글 5개"
  - [ ] `execute_graphql` 실행 테스트
  - [ ] `get_schema_info` 정보 조회 테스트

## 📚 문서화 및 마무리

### Phase 9: 문서 작성
- [ ] **README.md 작성**
  - [ ] 프로젝트 소개
  - [ ] 설치 및 실행 방법
  - [ ] MCP 도구 사용법
  - [ ] 예제 쿼리 모음

- [ ] **추가 문서**
  - [ ] GraphQL 스키마 문서
  - [ ] 자연어 변환 패턴 가이드
  - [ ] 트러블슈팅 가이드

### Phase 10: 최적화 및 개선
- [ ] **성능 최적화**
  - [ ] MongoDB 인덱스 설정
  - [ ] GraphQL 쿼리 최적화
  - [ ] 변환 로직 성능 개선

- [ ] **에러 처리 강화**
  - [ ] 잘못된 자연어 입력 처리
  - [ ] GraphQL 쿼리 오류 처리
  - [ ] 네트워크 오류 처리

## 🎯 검증 체크리스트

### 최종 확인 사항
- [ ] **환경 구성**
  - [ ] `docker-compose up`으로 모든 서비스 정상 실행
  - [ ] 모든 포트 정상 접근 (4000, 8081, 27017)

- [ ] **데이터 및 API**
  - [ ] MongoDB에 샘플 데이터 정상 로딩
  - [ ] GraphQL Playground에서 모든 쿼리 실행 가능
  - [ ] 관계 조회 정상 작동

- [ ] **MCP 기능**
  - [ ] 3개 도구 모두 정상 작동
  - [ ] 기본적인 한국어 패턴 변환 성공
  - [ ] 복잡한 관계 쿼리 변환 가능

- [ ] **사용자 경험**
  - [ ] 직관적인 자연어 입력 지원
  - [ ] 명확한 오류 메시지 제공
  - [ ] 충분한 문서화 완료

## 🔄 개발 우선순위
1. **1단계**: Docker 환경 구성 및 GraphQL 서버 구축
2. **2단계**: 기본 MCP 도구 구현
3. **3단계**: 자연어 변환 로직 구현
4. **4단계**: 테스트 및 문서화
5. **5단계**: 최적화 및 개선
---
