---
alwaysApply: true
---
# JavaScript 안전 개발 규칙 (Node.js 20)

## 모던 JavaScript 기능 활용
- **ES2023 기능** 활용: Array.prototype.toSorted(), Array.prototype.with() 등
- **ES2022 기능**: Top-level await, private fields, class static blocks
- **ES2021 기능**: Logical assignment operators (??=, ||=, &&=)
- **ES2020 기능**: Optional chaining (`?.`), Nullish coalescing (`??`)

## 타입 안전성 (런타임)
- **JSDoc 주석**: 매개변수와 반환값 타입을 JSDoc으로 문서화
- **타입 검증**: 런타임에서 입력값 검증 (joi, zod 등 사용)
- **instanceof 검사**: 객체 타입 확인에 instanceof 활용
- **typeof 검사**: 원시 타입 확인에 typeof 활용

## 함수 및 메서드
- **화살표 함수**: 간단한 함수는 화살표 함수 사용
- **async/await**: Promise 기반 비동기 처리에 async/await 선호
- **매개변수 기본값**: 기본값으로 함수 견고성 향상
- **구조 분해 할당**: 객체/배열 매개변수는 구조 분해 활용

## 객체 및 데이터 구조
- **const 우선**: 재할당이 없는 변수는 const 사용
- **Object.freeze()**: 불변 객체가 필요한 경우 freeze 활용
- **Map/Set**: 적절한 상황에서 Map, Set 자료구조 사용
- **Spread 연산자**: 배열/객체 복사에 spread 연산자 활용

## 에러 처리
- **try-catch**: 비동기 작업에서 적절한 에러 핸들링
- **커스텀 에러**: Error 클래스 상속으로 의미있는 에러 생성
- **에러 체이닝**: cause 옵션으로 에러 원인 추적
- **Graceful degradation**: 에러 상황에서도 앱이 중단되지 않도록 처리

## 코드 품질
- **ESLint**: JavaScript 표준 린팅 규칙 적용
- **Prettier**: 일관된 코드 포맷팅
- **명명 규칙**: camelCase(변수/함수), PascalCase(클래스/생성자)
- **JSDoc**: 복잡한 함수에는 JSDoc 주석 작성

## Node.js 20 특화
- **ES Modules**: import/export 구문 사용 (CommonJS 지양)
- **Process warnings**: --trace-warnings 플래그로 경고 추적
- **Performance hooks**: 성능 측정에 perf_hooks 모듈 활용
- **Worker threads**: CPU 집약적 작업에 worker_threads 활용

## 성능 최적화
- **동적 import**: 필요시에만 모듈 로드
- **Object.hasOwnProperty**: in 연산자 대신 hasOwnProperty 사용
- **배열 메서드 체이닝**: map, filter, reduce 등 함수형 프로그래밍 활용
- **메모리 누수 방지**: 이벤트 리스너 정리, WeakMap/WeakSet 활용

## 보안 및 금지 사항
- **eval() 사용 금지**: 코드 인젝션 위험
- **Function() 생성자 금지**: 동적 코드 실행 방지
- **전역 변수 남용 금지**: 모듈 스코프 활용
- **== 연산자 지양**: 엄격한 비교를 위해 === 사용
- **with 문 금지**: 스코프 혼란 방지
