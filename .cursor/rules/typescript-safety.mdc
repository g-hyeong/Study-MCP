---
alwaysApply: true
---

# TypeScript 안전 개발 규칙

## 타입 안전성
- **strict 모드** 활성화: `"strict": true` 필수
- **any 타입 금지**: `unknown`, `object`, 구체적 타입 사용
- **Non-null assertion (`!`) 최소화**: 타입 가드 또는 옵셔널 체이닝 사용
- **타입 단언 신중 사용**: `as` 대신 타입 가드나 타입 예측자 선호

## 함수 및 메서드
- **반환 타입 명시**: 모든 public 함수/메서드에 반환 타입 선언
- **매개변수 타입 명시**: 추론 가능한 경우도 명시적 선언 권장
- **함수 오버로드**: 복잡한 시그니처는 오버로드로 명확히 구분

## 인터페이스 및 타입
- **인터페이스 우선**: 확장 가능한 객체 구조는 `interface` 사용
- **타입 별칭**: 유니온, 원시 타입 조합은 `type` 사용
- **제네릭 제약**: `extends` 키워드로 제네릭 타입 제한
- **readonly 속성**: 불변 데이터는 `readonly` 키워드 사용

## 에러 처리
- **Result 패턴**: 성공/실패를 명시적으로 표현하는 타입 사용
- **예외 타입**: 커스텀 에러 클래스로 예외 유형 구분
- **Optional Chaining**: `?.`와 `??` 연산자로 안전한 접근

## 코드 품질
- **ESLint + TypeScript**: `@typescript-eslint` 규칙 적용
- **Prettier**: 일관된 코드 포맷팅
- **명명 규칙**: PascalCase(타입/인터페이스), camelCase(변수/함수)
- **타입 가드**: `typeof`, `instanceof`, 사용자 정의 타입 가드 활용

## 성능 최적화
- **지연 로딩**: 동적 import로 번들 크기 최적화
- **타입 전용 import**: `import type` 구문 사용
- **유틸리티 타입**: `Pick`, `Omit`, `Partial` 등 적극 활용

## 금지 사항
- `eval()` 사용 금지
- `Function` 생성자 사용 금지
- 전역 변수 남용 금지
- `delete` 연산자로 객체 속성 제거 금지 (undefined 할당 권장)
# TypeScript 안전 개발 규칙

## 타입 안전성
- **strict 모드** 활성화: `"strict": true` 필수
- **any 타입 금지**: `unknown`, `object`, 구체적 타입 사용
- **Non-null assertion (`!`) 최소화**: 타입 가드 또는 옵셔널 체이닝 사용
- **타입 단언 신중 사용**: `as` 대신 타입 가드나 타입 예측자 선호

## 함수 및 메서드
- **반환 타입 명시**: 모든 public 함수/메서드에 반환 타입 선언
- **매개변수 타입 명시**: 추론 가능한 경우도 명시적 선언 권장
- **함수 오버로드**: 복잡한 시그니처는 오버로드로 명확히 구분

## 인터페이스 및 타입
- **인터페이스 우선**: 확장 가능한 객체 구조는 `interface` 사용
- **타입 별칭**: 유니온, 원시 타입 조합은 `type` 사용
- **제네릭 제약**: `extends` 키워드로 제네릭 타입 제한
- **readonly 속성**: 불변 데이터는 `readonly` 키워드 사용

## 에러 처리
- **Result 패턴**: 성공/실패를 명시적으로 표현하는 타입 사용
- **예외 타입**: 커스텀 에러 클래스로 예외 유형 구분
- **Optional Chaining**: `?.`와 `??` 연산자로 안전한 접근

## 코드 품질
- **ESLint + TypeScript**: `@typescript-eslint` 규칙 적용
- **Prettier**: 일관된 코드 포맷팅
- **명명 규칙**: PascalCase(타입/인터페이스), camelCase(변수/함수)
- **타입 가드**: `typeof`, `instanceof`, 사용자 정의 타입 가드 활용

## 성능 최적화
- **지연 로딩**: 동적 import로 번들 크기 최적화
- **타입 전용 import**: `import type` 구문 사용
- **유틸리티 타입**: `Pick`, `Omit`, `Partial` 등 적극 활용

## 금지 사항
- `eval()` 사용 금지
- `Function` 생성자 사용 금지
- 전역 변수 남용 금지
- `delete` 연산자로 객체 속성 제거 금지 (undefined 할당 권장)
